@model List<AGONFRONT.Models.Busquedas>
@using System.Linq

@{
    ViewBag.Title = "Busquedas";
    Layout = "~/Views/Shared/_LayoutLoged.cshtml";
}

<div class="row">
    @Html.Partial("_PartialAsideCategorias")

    <div class="col-md-9">
        <div id="productos-container">
            @Html.Partial("_PartialProductosBusqueda", Model)
        </div>
    </div>
</div>

@section Scripts {
    @*<script>
            const productos = @Html.Raw(Json.Encode(Model));
            console.log(productos); // Ahora tienes acceso al modelo en JS
        </script>
        <script>
            document.getElementById('formFiltros').addEventListener('change', function () {
                // Obtener las categorías seleccionadas
                var categoriasSeleccionadas = Array.from(document.querySelectorAll('input[name="categorias"]:checked')).map(input => input.value);

                // Obtener el rango de precio
                var precioMin = document.querySelector('input[name="precioMin"]').value;
                var precioMax = document.querySelector('input[name="precioMax"]').value;

                console.log(productos); // Ahora tienes acceso al modelo en JS

                // Filtrar productos
                var productos = @Html.Raw(Json.Encode(Model));

                productos.forEach(function (producto) {
                    var categoria = producto.categoria;
                    var precio = parseFloat(producto.precio);

                    var cumpleFiltro = true;

                    // Filtro por categoría
                    if (categoriasSeleccionadas.length > 0 && !categoriasSeleccionadas.includes(categoria)) {
                        cumpleFiltro = false;
                    }

                    // Filtro por precio
                    if ((precioMin && precio < parseFloat(precioMin)) || (precioMax && precio > parseFloat(precioMax))) {
                        cumpleFiltro = false;
                    }

                    // Filtro por ubicación


                    // Mostrar u ocultar el producto según los filtros
                    if (cumpleFiltro) {
                        producto.style.display = 'block';  // Mostrar el producto
                    } else {
                        producto.style.display = 'none';  // Ocultar el producto
                    }
                });
            });
        </script>*@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('formFiltros');

            const realizarFiltrado = async () => {
                const formData = new FormData(form);

                const categorias = formData.getAll('categorias');
                const precioMin = formData.get('precioMin');
                const precioMax = formData.get('precioMax');

                const queryString = new URLSearchParams();

                categorias.forEach(cat => queryString.append('categorias', cat));
                if (precioMin) queryString.append('precioMin', precioMin);
                if (precioMax) queryString.append('precioMax', precioMax);

                try {
                    const response = await fetch(`/Busquedas/FiltrarProductos?${queryString.toString()}`, {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) throw new Error('Error al obtener productos filtrados');

                    const html = await response.text();
                    document.getElementById('productos-container').innerHTML = html;

                } catch (err) {
                    console.error('Error:', err);
                }
            };

            form.addEventListener('change', realizarFiltrado);
            form.addEventListener('input', realizarFiltrado); // para inputs numéricos
        });
    </script>
}